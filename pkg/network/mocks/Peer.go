// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import consensus "github.com/helinwang/dex/pkg/consensus"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Peer is an autogenerated mock type for the Peer type
type Peer struct {
	mock.Mock
}

// Block provides a mock function with given fields: sender, b
func (_m *Peer) Block(sender consensus.Peer, b *consensus.Block) error {
	ret := _m.Called(sender, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.Peer, *consensus.Block) error); ok {
		r0 = rf(sender, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockProposal provides a mock function with given fields: sender, b
func (_m *Peer) BlockProposal(sender consensus.Peer, b *consensus.BlockProposal) error {
	ret := _m.Called(sender, b)

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.Peer, *consensus.BlockProposal) error); ok {
		r0 = rf(sender, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetData provides a mock function with given fields: requester, items
func (_m *Peer) GetData(requester consensus.Peer, items []consensus.ItemID) error {
	ret := _m.Called(requester, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.Peer, []consensus.ItemID) error); ok {
		r0 = rf(requester, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Inventory provides a mock function with given fields: sender, items
func (_m *Peer) Inventory(sender consensus.Peer, items []consensus.ItemID) error {
	ret := _m.Called(sender, items)

	var r0 error
	if rf, ok := ret.Get(0).(func(consensus.Peer, []consensus.ItemID) error); ok {
		r0 = rf(sender, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotarizationShare provides a mock function with given fields: n
func (_m *Peer) NotarizationShare(n *consensus.NtShare) error {
	ret := _m.Called(n)

	var r0 error
	if rf, ok := ret.Get(0).(func(*consensus.NtShare) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Peers provides a mock function with given fields:
func (_m *Peer) Peers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Peer) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RandBeaconSig provides a mock function with given fields: r
func (_m *Peer) RandBeaconSig(r *consensus.RandBeaconSig) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*consensus.RandBeaconSig) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RandBeaconSigShare provides a mock function with given fields: r
func (_m *Peer) RandBeaconSigShare(r *consensus.RandBeaconSigShare) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*consensus.RandBeaconSigShare) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sync provides a mock function with given fields: start
func (_m *Peer) Sync(start int) ([]*consensus.RandBeaconSig, []*consensus.Block, error) {
	ret := _m.Called(start)

	var r0 []*consensus.RandBeaconSig
	if rf, ok := ret.Get(0).(func(int) []*consensus.RandBeaconSig); ok {
		r0 = rf(start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*consensus.RandBeaconSig)
		}
	}

	var r1 []*consensus.Block
	if rf, ok := ret.Get(1).(func(int) []*consensus.Block); ok {
		r1 = rf(start)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*consensus.Block)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(start)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SysTxn provides a mock function with given fields: s
func (_m *Peer) SysTxn(s *consensus.SysTxn) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*consensus.SysTxn) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Txn provides a mock function with given fields: txn
func (_m *Peer) Txn(txn []byte) error {
	ret := _m.Called(txn)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePeers provides a mock function with given fields: _a0
func (_m *Peer) UpdatePeers(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
